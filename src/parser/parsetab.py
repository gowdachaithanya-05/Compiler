
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftEQNEleftLTLEGTGEleftPLUSMINUSleftMULTIPLYDIVIDErightUMINUSASSIGN COMMA DIVIDE ELSE EQ FLOAT FLOAT_LITERAL GE GT IDENTIFIER IF INT INT_LITERAL LBRACE LE LPAREN LT MINUS MULTIPLY NE PLUS RBRACE RETURN RPAREN SEMICOLON WHILEprogram : declarationsdeclarations : declarations declaration\n                    | declarationdeclaration : var_declaration\n                   | func_declarationvar_declaration : type_specifier IDENTIFIER SEMICOLON\n                       | type_specifier IDENTIFIER ASSIGN expression SEMICOLONtype_specifier : INT\n                      | FLOATfunc_declaration : type_specifier IDENTIFIER LPAREN params RPAREN compound_stmtparams : param_list\n              | emptyparam_list : param_list COMMA param\n                  | paramparam : type_specifier IDENTIFIERcompound_stmt : LBRACE stmt_list RBRACEstmt_list : stmt_list statement\n                 | emptystatement : expr_stmt\n                 | var_declaration\n                 | compound_stmt\n                 | if_stmt\n                 | return_stmtif_stmt : IF LPAREN expression RPAREN statement\n               | IF LPAREN expression RPAREN statement ELSE statementreturn_stmt : RETURN expression SEMICOLONexpr_stmt : expression SEMICOLONexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression MULTIPLY expression\n                  | expression DIVIDE expression\n                  | expression ASSIGN expression\n                  | expression LT expression\n                  | expression LE expression\n                  | expression GT expression\n                  | expression GE expression\n                  | expression EQ expression\n                  | expression NE expressionexpression : MINUS expression %prec UMINUSexpression : LPAREN expression RPARENexpression : INT_LITERAL\n                  | FLOAT_LITERALexpression : IDENTIFIERempty :'
    
_lr_action_items = {'INT':([0,2,3,4,5,9,11,13,26,41,54,55,57,58,59,60,61,62,63,64,65,70,75,76,77,78,79,],[7,7,-3,-4,-5,-2,-6,7,-7,7,-10,-44,7,-18,-16,-17,-19,-20,-21,-22,-23,-27,-26,7,-24,7,-25,]),'FLOAT':([0,2,3,4,5,9,11,13,26,41,54,55,57,58,59,60,61,62,63,64,65,70,75,76,77,78,79,],[8,8,-3,-4,-5,-2,-6,8,-7,8,-10,-44,8,-18,-16,-17,-19,-20,-21,-22,-23,-27,-26,8,-24,8,-25,]),'$end':([1,2,3,4,5,9,11,26,54,59,],[0,-1,-3,-4,-5,-2,-6,-7,-10,-16,]),'IDENTIFIER':([6,7,8,11,12,16,17,20,25,26,27,28,29,30,31,32,33,34,35,36,55,57,58,59,60,61,62,63,64,65,67,69,70,72,75,76,77,78,79,],[10,-8,-9,-6,14,14,14,39,14,-7,14,14,14,14,14,14,14,14,14,14,-44,14,-18,-16,-17,-19,-20,-21,-22,-23,71,14,-27,14,-26,14,-24,14,-25,]),'SEMICOLON':([10,14,15,18,19,37,42,43,44,45,46,47,48,49,50,51,52,53,66,71,73,],[11,-43,26,-41,-42,-39,-32,-28,-29,-30,-31,-33,-34,-35,-36,-37,-38,-40,70,11,75,]),'ASSIGN':([10,14,15,18,19,37,38,42,43,44,45,46,47,48,49,50,51,52,53,66,71,73,74,],[12,-43,25,-41,-42,-39,25,25,-28,-29,-30,-31,-33,-34,-35,-36,-37,-38,-40,25,12,25,25,]),'LPAREN':([10,11,12,16,17,25,26,27,28,29,30,31,32,33,34,35,36,55,57,58,59,60,61,62,63,64,65,68,69,70,72,75,76,77,78,79,],[13,-6,17,17,17,17,-7,17,17,17,17,17,17,17,17,17,17,-44,17,-18,-16,-17,-19,-20,-21,-22,-23,72,17,-27,17,-26,17,-24,17,-25,]),'RBRACE':([11,26,55,57,58,59,60,61,62,63,64,65,70,75,77,79,],[-6,-7,-44,59,-18,-16,-17,-19,-20,-21,-22,-23,-27,-26,-24,-25,]),'LBRACE':([11,26,40,55,57,58,59,60,61,62,63,64,65,70,75,76,77,78,79,],[-6,-7,55,-44,55,-18,-16,-17,-19,-20,-21,-22,-23,-27,-26,55,-24,55,-25,]),'IF':([11,26,55,57,58,59,60,61,62,63,64,65,70,75,76,77,78,79,],[-6,-7,-44,68,-18,-16,-17,-19,-20,-21,-22,-23,-27,-26,68,-24,68,-25,]),'RETURN':([11,26,55,57,58,59,60,61,62,63,64,65,70,75,76,77,78,79,],[-6,-7,-44,69,-18,-16,-17,-19,-20,-21,-22,-23,-27,-26,69,-24,69,-25,]),'MINUS':([11,12,14,15,16,17,18,19,25,26,27,28,29,30,31,32,33,34,35,36,37,38,42,43,44,45,46,47,48,49,50,51,52,53,55,57,58,59,60,61,62,63,64,65,66,69,70,72,73,74,75,76,77,78,79,],[-6,16,-43,28,16,16,-41,-42,16,-7,16,16,16,16,16,16,16,16,16,16,-39,28,28,-28,-29,-30,-31,28,28,28,28,28,28,-40,-44,16,-18,-16,-17,-19,-20,-21,-22,-23,28,16,-27,16,28,28,-26,16,-24,16,-25,]),'INT_LITERAL':([11,12,16,17,25,26,27,28,29,30,31,32,33,34,35,36,55,57,58,59,60,61,62,63,64,65,69,70,72,75,76,77,78,79,],[-6,18,18,18,18,-7,18,18,18,18,18,18,18,18,18,18,-44,18,-18,-16,-17,-19,-20,-21,-22,-23,18,-27,18,-26,18,-24,18,-25,]),'FLOAT_LITERAL':([11,12,16,17,25,26,27,28,29,30,31,32,33,34,35,36,55,57,58,59,60,61,62,63,64,65,69,70,72,75,76,77,78,79,],[-6,19,19,19,19,-7,19,19,19,19,19,19,19,19,19,19,-44,19,-18,-16,-17,-19,-20,-21,-22,-23,19,-27,19,-26,19,-24,19,-25,]),'ELSE':([11,26,59,61,62,63,64,65,70,75,77,79,],[-6,-7,-16,-19,-20,-21,-22,-23,-27,-26,78,-25,]),'RPAREN':([13,14,18,19,21,22,23,24,37,38,39,42,43,44,45,46,47,48,49,50,51,52,53,56,74,],[-44,-43,-41,-42,40,-11,-12,-14,-39,53,-15,-32,-28,-29,-30,-31,-33,-34,-35,-36,-37,-38,-40,-13,76,]),'PLUS':([14,15,18,19,37,38,42,43,44,45,46,47,48,49,50,51,52,53,66,73,74,],[-43,27,-41,-42,-39,27,27,-28,-29,-30,-31,27,27,27,27,27,27,-40,27,27,27,]),'MULTIPLY':([14,15,18,19,37,38,42,43,44,45,46,47,48,49,50,51,52,53,66,73,74,],[-43,29,-41,-42,-39,29,29,29,29,-30,-31,29,29,29,29,29,29,-40,29,29,29,]),'DIVIDE':([14,15,18,19,37,38,42,43,44,45,46,47,48,49,50,51,52,53,66,73,74,],[-43,30,-41,-42,-39,30,30,30,30,-30,-31,30,30,30,30,30,30,-40,30,30,30,]),'LT':([14,15,18,19,37,38,42,43,44,45,46,47,48,49,50,51,52,53,66,73,74,],[-43,31,-41,-42,-39,31,31,-28,-29,-30,-31,-33,-34,-35,-36,31,31,-40,31,31,31,]),'LE':([14,15,18,19,37,38,42,43,44,45,46,47,48,49,50,51,52,53,66,73,74,],[-43,32,-41,-42,-39,32,32,-28,-29,-30,-31,-33,-34,-35,-36,32,32,-40,32,32,32,]),'GT':([14,15,18,19,37,38,42,43,44,45,46,47,48,49,50,51,52,53,66,73,74,],[-43,33,-41,-42,-39,33,33,-28,-29,-30,-31,-33,-34,-35,-36,33,33,-40,33,33,33,]),'GE':([14,15,18,19,37,38,42,43,44,45,46,47,48,49,50,51,52,53,66,73,74,],[-43,34,-41,-42,-39,34,34,-28,-29,-30,-31,-33,-34,-35,-36,34,34,-40,34,34,34,]),'EQ':([14,15,18,19,37,38,42,43,44,45,46,47,48,49,50,51,52,53,66,73,74,],[-43,35,-41,-42,-39,35,35,-28,-29,-30,-31,-33,-34,-35,-36,-37,-38,-40,35,35,35,]),'NE':([14,15,18,19,37,38,42,43,44,45,46,47,48,49,50,51,52,53,66,73,74,],[-43,36,-41,-42,-39,36,36,-28,-29,-30,-31,-33,-34,-35,-36,-37,-38,-40,36,36,36,]),'COMMA':([22,24,39,56,],[41,-14,-15,-13,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declarations':([0,],[2,]),'declaration':([0,2,],[3,9,]),'var_declaration':([0,2,57,76,78,],[4,4,62,62,62,]),'func_declaration':([0,2,],[5,5,]),'type_specifier':([0,2,13,41,57,76,78,],[6,6,20,20,67,67,67,]),'expression':([12,16,17,25,27,28,29,30,31,32,33,34,35,36,57,69,72,76,78,],[15,37,38,42,43,44,45,46,47,48,49,50,51,52,66,73,74,66,66,]),'params':([13,],[21,]),'param_list':([13,],[22,]),'empty':([13,55,],[23,58,]),'param':([13,41,],[24,56,]),'compound_stmt':([40,57,76,78,],[54,63,63,63,]),'stmt_list':([55,],[57,]),'statement':([57,76,78,],[60,77,79,]),'expr_stmt':([57,76,78,],[61,61,61,]),'if_stmt':([57,76,78,],[64,64,64,]),'return_stmt':([57,76,78,],[65,65,65,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> declarations','program',1,'p_program','parser.py',19),
  ('declarations -> declarations declaration','declarations',2,'p_declarations','parser.py',23),
  ('declarations -> declaration','declarations',1,'p_declarations','parser.py',24),
  ('declaration -> var_declaration','declaration',1,'p_declaration','parser.py',31),
  ('declaration -> func_declaration','declaration',1,'p_declaration','parser.py',32),
  ('var_declaration -> type_specifier IDENTIFIER SEMICOLON','var_declaration',3,'p_var_declaration','parser.py',36),
  ('var_declaration -> type_specifier IDENTIFIER ASSIGN expression SEMICOLON','var_declaration',5,'p_var_declaration','parser.py',37),
  ('type_specifier -> INT','type_specifier',1,'p_type_specifier','parser.py',44),
  ('type_specifier -> FLOAT','type_specifier',1,'p_type_specifier','parser.py',45),
  ('func_declaration -> type_specifier IDENTIFIER LPAREN params RPAREN compound_stmt','func_declaration',6,'p_func_declaration','parser.py',49),
  ('params -> param_list','params',1,'p_params','parser.py',53),
  ('params -> empty','params',1,'p_params','parser.py',54),
  ('param_list -> param_list COMMA param','param_list',3,'p_param_list','parser.py',58),
  ('param_list -> param','param_list',1,'p_param_list','parser.py',59),
  ('param -> type_specifier IDENTIFIER','param',2,'p_param','parser.py',66),
  ('compound_stmt -> LBRACE stmt_list RBRACE','compound_stmt',3,'p_compound_stmt','parser.py',70),
  ('stmt_list -> stmt_list statement','stmt_list',2,'p_stmt_list','parser.py',74),
  ('stmt_list -> empty','stmt_list',1,'p_stmt_list','parser.py',75),
  ('statement -> expr_stmt','statement',1,'p_statement','parser.py',82),
  ('statement -> var_declaration','statement',1,'p_statement','parser.py',83),
  ('statement -> compound_stmt','statement',1,'p_statement','parser.py',84),
  ('statement -> if_stmt','statement',1,'p_statement','parser.py',85),
  ('statement -> return_stmt','statement',1,'p_statement','parser.py',86),
  ('if_stmt -> IF LPAREN expression RPAREN statement','if_stmt',5,'p_if_stmt','parser.py',90),
  ('if_stmt -> IF LPAREN expression RPAREN statement ELSE statement','if_stmt',7,'p_if_stmt','parser.py',91),
  ('return_stmt -> RETURN expression SEMICOLON','return_stmt',3,'p_return_stmt','parser.py',98),
  ('expr_stmt -> expression SEMICOLON','expr_stmt',2,'p_expr_stmt','parser.py',102),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','parser.py',106),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','parser.py',107),
  ('expression -> expression MULTIPLY expression','expression',3,'p_expression_binop','parser.py',108),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','parser.py',109),
  ('expression -> expression ASSIGN expression','expression',3,'p_expression_binop','parser.py',110),
  ('expression -> expression LT expression','expression',3,'p_expression_binop','parser.py',111),
  ('expression -> expression LE expression','expression',3,'p_expression_binop','parser.py',112),
  ('expression -> expression GT expression','expression',3,'p_expression_binop','parser.py',113),
  ('expression -> expression GE expression','expression',3,'p_expression_binop','parser.py',114),
  ('expression -> expression EQ expression','expression',3,'p_expression_binop','parser.py',115),
  ('expression -> expression NE expression','expression',3,'p_expression_binop','parser.py',116),
  ('expression -> MINUS expression','expression',2,'p_expression_uminus','parser.py',120),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','parser.py',124),
  ('expression -> INT_LITERAL','expression',1,'p_expression_number','parser.py',128),
  ('expression -> FLOAT_LITERAL','expression',1,'p_expression_number','parser.py',129),
  ('expression -> IDENTIFIER','expression',1,'p_expression_identifier','parser.py',133),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',137),
]
