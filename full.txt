
# Start of src/main.tsx

import React from 'react';
import { createRoot } from 'react-dom/client';
import Index from './pages/Index';
import './index.css';
import './styles/prism-custom.css';

createRoot(document.getElementById('root')!).render(
  <React.StrictMode>
    <Index />
  </React.StrictMode>
);

# End of src/main.tsx


# Start of src/pages/Index.tsx

import React from 'react';
import GameLevel from '@/components/GameLevel';
import GameProgress from '@/components/GameProgress';
import DifficultySelector, { Difficulty } from '@/components/DifficultySelector';
import { LEVELS } from '@/data/levels';
import { ThemeProvider, useTheme } from '@/contexts/ThemeContext';

const GameContent = () => {
  const theme = useTheme();
  const [currentLevel, setCurrentLevel] = React.useState(1);
  const [difficulty, setDifficulty] = React.useState<Difficulty>('easy');
  
  const currentLevels = LEVELS[difficulty];
  
  const handleLevelComplete = () => {
    if (currentLevel < currentLevels.length) {
      setCurrentLevel(prev => prev + 1);
    }
  };

  const handleDifficultyChange = (newDifficulty: Difficulty) => {
    setDifficulty(newDifficulty);
    setCurrentLevel(1);
  };

  return (
    <div className={`min-h-screen px-4 py-6 sm:p-8 transition-colors duration-500 ${theme.bgColor}`}>
      <div className="max-w-2xl mx-auto">
        <h1 className={`text-xl sm:text-3xl font-retro mb-8 text-center ${theme.textGradient}`}>
          C-Syntax Adventure
        </h1>
        
        <DifficultySelector 
          difficulty={difficulty}
          onDifficultyChange={handleDifficultyChange}
        />
        
        <GameProgress 
          currentLevel={currentLevel} 
          totalLevels={currentLevels.length}
          theme={theme}
        />
        
        <GameLevel
          level={currentLevel}
          code={currentLevels[currentLevel - 1].code}
          solution={currentLevels[currentLevel - 1].solution}
          hint={currentLevels[currentLevel - 1].hint}
          onComplete={handleLevelComplete}
          theme={theme}
        />
        
        <div className="mt-6 text-center">
          <p className={`text-xs sm:text-sm font-retro ${theme.secondaryColor}`}>
            {currentLevel === currentLevels.length ? (
              "üéÆ You've completed all levels in this difficulty! Try a harder mode! üèÜ"
            ) : (
              "Fix the syntax errors to advance to the next level!"
            )}
          </p>
        </div>
      </div>
    </div>
  );
};

const Index = () => {
  const [difficulty, setDifficulty] = React.useState<Difficulty>('easy');

  return (
    <ThemeProvider difficulty={difficulty}>
      <GameContent />
    </ThemeProvider>
  );
};

export default Index;
# End of src/pages/Index.tsx


# Start of src/components/GameLevel.tsx

import React from 'react';
import { Card } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { useToast } from '@/hooks/use-toast';
import { Textarea } from '@/components/ui/textarea';
import Confetti from 'react-confetti';

interface GameLevelProps {
  level: number;
  code: string;
  solution: string;
  hint: string;
  onComplete: () => void;
  theme: {
    primaryColor: string;
    secondaryColor: string;
    glowEffect: string;
    borderEffect: string;
    textGradient: string;
    cardBg: string;
    animation: string;
  };
}

const GameLevel: React.FC<GameLevelProps> = ({ 
  level, 
  code, 
  solution, 
  hint, 
  onComplete,
  theme 
}) => {
  const [userCode, setUserCode] = React.useState(code);
  const [showHint, setShowHint] = React.useState(false);
  const [showConfetti, setShowConfetti] = React.useState(false);
  const { toast } = useToast();
  const editorRef = React.useRef<HTMLTextAreaElement>(null);

  React.useEffect(() => {
    setUserCode(code);
    setShowHint(false);
    setShowConfetti(false);
  }, [code, level]);

  const handleCodeChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
    const value = e.target.value;
    setUserCode(value);
  };

  const handleKeyDown = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {
    if (e.key === 'Tab') {
      e.preventDefault();
      const start = e.currentTarget.selectionStart;
      const end = e.currentTarget.selectionEnd;
      const newValue = userCode.substring(0, start) + '  ' + userCode.substring(end);
      setUserCode(newValue);
      
      // Set cursor position after tab
      setTimeout(() => {
        if (editorRef.current) {
          editorRef.current.selectionStart = editorRef.current.selectionEnd = start + 2;
        }
      }, 0);
    }
  };

  const checkSolution = () => {
    if (userCode.trim() === solution.trim()) {
      // Show confetti if this is level 3 (final level)
      if (level === 3) {
        setShowConfetti(true);
        // Stop confetti after 5 seconds
        setTimeout(() => setShowConfetti(false), 5000);
      }
      
      toast({
        title: "Level Complete! üéÆ",
        description: "Great job! You've fixed the syntax error!",
        className: `font-retro ${theme.textGradient}`,
      });
      onComplete();
    } else {
      toast({
        title: "Try Again! üîÑ",
        description: "That's not quite right. Keep trying!",
        variant: "destructive",
        className: "font-retro",
      });
    }
  };

  return (
    <>
      {showConfetti && (
        <Confetti
          width={window.innerWidth}
          height={window.innerHeight}
          recycle={false}
          numberOfPieces={500}
          gravity={0.3}
        />
      )}
      <Card className={`p-4 sm:p-6 border-2 transition-all duration-300 
                     ${theme.cardBg} ${theme.borderEffect} ${theme.glowEffect}`}>
        <h2 className={`text-lg sm:text-xl font-retro mb-4 ${theme.textGradient}`}>
          Level {level}
        </h2>
        <div className="mb-4 relative">
          <div className="relative font-mono rounded-lg overflow-hidden">
            <Textarea
              ref={editorRef}
              value={userCode}
              onChange={handleCodeChange}
              onKeyDown={handleKeyDown}
              className={`w-full min-h-[200px] p-4 
                       font-mono text-base rounded-lg border-2 
                       focus:outline-none focus:ring-1 resize-none scrollbar-thin 
                       transition-all duration-300 bg-[#1a1a1a]
                       ${theme.primaryColor} ${theme.borderEffect}`}
              spellCheck="false"
              style={{
                fontFamily: 'Consolas, Monaco, "Andale Mono", monospace',
                lineHeight: '1.5',
                tabSize: '2',
              }}
            />
          </div>
        </div>
        <div className="flex flex-col sm:flex-row justify-between items-center gap-3 sm:gap-4">
          <Button
            onClick={() => setShowHint(!showHint)}
            variant="outline"
            className={`w-full sm:w-auto font-retro text-xs sm:text-sm px-6 py-2
                     hover:bg-opacity-10 transition-all duration-200 
                     ${theme.borderEffect} ${theme.secondaryColor}`}
          >
            {showHint ? "Hide Hint" : "Show Hint"}
          </Button>
          <Button
            onClick={checkSolution}
            className={`w-full sm:w-auto font-retro text-xs sm:text-sm px-6 py-2
                     text-white transition-all duration-200 
                     hover:bg-opacity-90 ${theme.glowEffect}`}
          >
            Submit
          </Button>
        </div>
        {showHint && (
          <div className={`mt-4 p-4 rounded-lg border animate-in slide-in-from-bottom duration-300 
                        transition-all ${theme.borderEffect} ${theme.secondaryColor} bg-opacity-10`}>
            <p className="font-retro text-sm">{hint}</p>
          </div>
        )}
      </Card>
    </>
  );
};

export default GameLevel;
# End of src/components/GameLevel.tsx


# Start of src/components/GameProgress.tsx

import React from 'react';

interface GameProgressProps {
  currentLevel: number;
  totalLevels: number;
  theme: {
    primaryColor: string;
    secondaryColor: string;
    glowEffect: string;
    borderEffect: string;
    textGradient: string;
  };
}

const GameProgress: React.FC<GameProgressProps> = ({ currentLevel, totalLevels, theme }) => {
  const completedLevels = currentLevel - 1;
  const isAllComplete = completedLevels === totalLevels;
  const progress = isAllComplete ? 100 : (completedLevels / totalLevels) * 100;

  return (
    <div className="w-full max-w-md mx-auto mb-8">
      <div className="p-4 rounded-lg border border-[#463a66] bg-[#1a1630] shadow-[0_0_15px_rgba(226,196,255,0.1)]">
        <div className="flex justify-between mb-3">
          <span className="font-retro text-sm text-[#e2c4ff]">
            {isAllComplete ? "All Levels Complete!" : `Level ${currentLevel}`}
          </span>
          <span className="font-retro text-sm text-[#e2c4ff]">
            {isAllComplete ? "Completed" : `${Math.round(progress)}%`}
          </span>
        </div>
        <div className="relative h-2.5 rounded-full overflow-hidden bg-[#463a66]">
          <div
            className="absolute top-0 left-0 h-full transition-all duration-500 ease-out bg-current"
            style={{ 
              width: `${progress}%`,
              backgroundColor: isAllComplete ? '#7fffd4' : '#ffeb3b'
            }}
          />
        </div>
      </div>
    </div>
  );
};

export default GameProgress;
# End of src/components/GameProgress.tsx


# Start of src/components/DifficultySelector.tsx

import React from 'react';
import { ToggleGroup, ToggleGroupItem } from '@/components/ui/toggle-group';

export type Difficulty = 'easy' | 'medium' | 'hard';

interface DifficultySelectorProps {
  difficulty: Difficulty;
  onDifficultyChange: (difficulty: Difficulty) => void;
}

const DifficultySelector: React.FC<DifficultySelectorProps> = ({
  difficulty,
  onDifficultyChange,
}) => {
  return (
    <div className="mb-6 text-center">
      <h2 className="text-sm sm:text-base font-retro text-[#e2c4ff] mb-3">
        Select Difficulty
      </h2>
      <ToggleGroup
        type="single"
        value={difficulty}
        onValueChange={(value) => value && onDifficultyChange(value as Difficulty)}
        className="border border-[#463a66] p-1 rounded-lg bg-[#1a1630] inline-flex shadow-[0_0_15px_rgba(226,196,255,0.1)]"
      >
        <ToggleGroupItem
          value="easy"
          className="relative px-6 py-2 font-retro text-xs transition-all duration-300
                   data-[state=on]:bg-[#7fffd4] data-[state=on]:text-[#1a1630]
                   data-[state=off]:text-[#e2c4ff] data-[state=off]:hover:bg-[#463a66]
                   rounded-md"
        >
          Easy
        </ToggleGroupItem>
        <ToggleGroupItem
          value="medium"
          className="relative px-6 py-2 font-retro text-xs transition-all duration-300
                   data-[state=on]:bg-[#ffeb3b] data-[state=on]:text-[#1a1630]
                   data-[state=off]:text-[#e2c4ff] data-[state=off]:hover:bg-[#463a66]
                   rounded-md"
        >
          Medium
        </ToggleGroupItem>
        <ToggleGroupItem
          value="hard"
          className="relative px-6 py-2 font-retro text-xs transition-all duration-300
                   data-[state=on]:bg-[#ff6b9d] data-[state=on]:text-white
                   data-[state=off]:text-[#e2c4ff] data-[state=off]:hover:bg-[#463a66]
                   rounded-md"
        >
          Hard
        </ToggleGroupItem>
      </ToggleGroup>
    </div>
  );
};

export default DifficultySelector; 
# End of src/components/DifficultySelector.tsx


# Start of src/contexts/ThemeContext.tsx

import React, { createContext, useContext } from 'react';
import { Difficulty } from '@/components/DifficultySelector';

interface ThemeContextType {
  bgColor: string;
  primaryColor: string;
  secondaryColor: string;
  glowEffect: string;
  borderEffect: string;
  textGradient: string;
  cardBg: string;
  animation: string;
}

const themesByDifficulty: Record<Difficulty, ThemeContextType> = {
  easy: {
    bgColor: 'bg-[#0f0720]',
    primaryColor: 'text-[#7fffd4]',
    secondaryColor: 'text-[#e2c4ff]',
    glowEffect: 'shadow-[0_0_15px_rgba(127,255,212,0.15)]',
    borderEffect: 'border-[#463a66] border-opacity-80',
    textGradient: 'bg-gradient-to-r from-[#7fffd4] to-[#e2c4ff] text-transparent bg-clip-text',
    cardBg: 'bg-[#1a1630]',
    animation: 'animate-none',
  },
  medium: {
    bgColor: 'bg-[#0f0720]',
    primaryColor: 'text-[#ffeb3b]',
    secondaryColor: 'text-[#e2c4ff]',
    glowEffect: 'shadow-[0_0_15px_rgba(255,235,59,0.15)]',
    borderEffect: 'border-[#463a66] border-opacity-80',
    textGradient: 'bg-gradient-to-r from-[#ffeb3b] to-[#e2c4ff] text-transparent bg-clip-text',
    cardBg: 'bg-[#1a1630]',
    animation: 'animate-none',
  },
  hard: {
    bgColor: 'bg-[#0f0720]',
    primaryColor: 'text-[#ff6b9d]',
    secondaryColor: 'text-[#e2c4ff]',
    glowEffect: 'shadow-[0_0_15px_rgba(255,107,157,0.15)]',
    borderEffect: 'border-[#463a66] border-opacity-80',
    textGradient: 'bg-gradient-to-r from-[#ff6b9d] to-[#e2c4ff] text-transparent bg-clip-text',
    cardBg: 'bg-[#1a1630]',
    animation: 'animate-none',
  },
};

const ThemeContext = createContext<ThemeContextType>(themesByDifficulty.easy);

export const useTheme = () => useContext(ThemeContext);

export const ThemeProvider: React.FC<{
  difficulty: Difficulty;
  children: React.ReactNode;
}> = ({ difficulty, children }) => {
  const theme = themesByDifficulty[difficulty];

  return (
    <ThemeContext.Provider value={theme}>
      {children}
    </ThemeContext.Provider>
  );
}; 
# End of src/contexts/ThemeContext.tsx


# Start of src/data/levels.ts

import { Difficulty } from '@/components/DifficultySelector';

interface Level {
  code: string;
  solution: string;
  hint: string;
}

type LevelsByDifficulty = {
  [key in Difficulty]: Level[];
};

export const LEVELS: LevelsByDifficulty = {
  easy: [
    {
      code: `#include <stdio.h>
int main() {
  printf("Hello World")
  return 0;
}`,
      solution: `#include <stdio.h>
int main() {
  printf("Hello World");
  return 0;
}`,
      hint: "Check the punctuation! C statements need a specific character at the end.",
    },
    {
      code: `#include <stdio.h>
int main() {
  int x = 5
  int y = 10;
  printf("%d", x + y);
  return 0;
}`,
      solution: `#include <stdio.h>
int main() {
  int x = 5;
  int y = 10;
  printf("%d", x + y);
  return 0;
}`,
      hint: "Look carefully at the first variable declaration. Is it properly terminated?",
    },
    {
      code: `#include <stdio.h>
int main() {
  int score = 100
  if(score >= 90)
    printf("You win")
  return 0;
}`,
      solution: `#include <stdio.h>
int main() {
  int score = 100;
  if(score >= 90)
    printf("You win");
  return 0;
}`,
      hint: "Multiple statements are missing the same punctuation mark. Can you spot them?",
    }
  ],
  medium: [
    {
      code: `#include <stdio.h>
int main() {
  for(int i = 0; i < 5; i++) {
    printf("%d", i)
  }
  return 0
}`,
      solution: `#include <stdio.h>
int main() {
  for(int i = 0; i < 5; i++) {
    printf("%d", i);
  }
  return 0;
}`,
      hint: "There are two syntax errors here. Check the printf and the return statement.",
    },
    {
      code: `#include <stdio.h>
int main() {
  int arr[5] = {1, 2, 3, 4, 5}
  for(int i = 0; i <= 5; i++) {
    printf("%d ", arr[i]);
  }
  return 0;
}`,
      solution: `#include <stdio.h>
int main() {
  int arr[5] = {1, 2, 3, 4, 5};
  for(int i = 0; i < 5; i++) {
    printf("%d ", arr[i]);
  }
  return 0;
}`,
      hint: "Check array declaration and loop condition. Remember arrays are 0-indexed!",
    },
    {
      code: `#include <stdio.h>
void printSquare(int n) {
  for(int i = 0; i < n; i++)
    for(int j = 0; j < n; j++)
      printf("*")
    printf("\\n");
  return;
}

int main() {
  printSquare(3);
  return 0;
}`,
      solution: `#include <stdio.h>
void printSquare(int n) {
  for(int i = 0; i < n; i++) {
    for(int j = 0; j < n; j++) {
      printf("*");
    }
    printf("\\n");
  }
  return;
}

int main() {
  printSquare(3);
  return 0;
}`,
      hint: "Check the nested loops. Where should the braces be? Also look for missing semicolons.",
    }
  ],
  hard: [
    {
      code: `#include <stdio.h>
void swap(int a, int b) {
  int temp = a;
  a = b;
  b = temp;
}

int main() {
  int x = 5, y = 10;
  swap(x, y);
  printf("%d %d", x, y);
  return 0;
}`,
      solution: `#include <stdio.h>
void swap(int *a, int *b) {
  int temp = *a;
  *a = *b;
  *b = temp;
}

int main() {
  int x = 5, y = 10;
  swap(&x, &y);
  printf("%d %d", x, y);
  return 0;
}`,
      hint: "Think about pass by value vs pass by reference. How can we modify the original variables?",
    },
    {
      code: `#include <stdio.h>
struct Node {
  int data;
  struct Node* next;
};

int main() {
  struct Node* head = malloc(sizeof(struct Node));
  head->data = 1;
  head->next = NULL;
  printf("%d", head->data);
  return 0;
}`,
      solution: `#include <stdio.h>
#include <stdlib.h>
struct Node {
  int data;
  struct Node* next;
};

int main() {
  struct Node* head = malloc(sizeof(struct Node));
  head->data = 1;
  head->next = NULL;
  printf("%d", head->data);
  free(head);
  return 0;
}`,
      hint: "What header is missing for memory allocation? Also, remember to free allocated memory!",
    },
    {
      code: `#include <stdio.h>
#include <stdlib.h>

int* findMax(int arr[], int size) {
  int max = arr[0];
  for(int i = 1; i < size; i++) {
    if(arr[i] > max)
      max = arr[i];
  }
  return &max;
}

int main() {
  int numbers[] = {5, 2, 9, 1, 7};
  int* maxPtr = findMax(numbers, 5);
  printf("Max: %d", *maxPtr);
  return 0;
}`,
      solution: `#include <stdio.h>
#include <stdlib.h>

int* findMax(int arr[], int size) {
  int* max = malloc(sizeof(int));
  *max = arr[0];
  for(int i = 1; i < size; i++) {
    if(arr[i] > *max)
      *max = arr[i];
  }
  return max;
}

int main() {
  int numbers[] = {5, 2, 9, 1, 7};
  int* maxPtr = findMax(numbers, 5);
  printf("Max: %d", *maxPtr);
  free(maxPtr);
  return 0;
}`,
      hint: "You're returning the address of a local variable. Think about where that variable lives in memory!",
    }
  ],
}; 
# End of src/data/levels.ts


# Start of src/lib/utils.ts

import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

# End of src/lib/utils.ts


# Start of src/hooks/use-toast.ts

import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }

# End of src/hooks/use-toast.ts


# Start of src/components/ui/card.tsx

import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }

# End of src/components/ui/card.tsx


# Start of src/components/ui/button.tsx

import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }

# End of src/components/ui/button.tsx


# Start of src/components/ui/textarea.tsx

import * as React from "react"

import { cn } from "@/lib/utils"

export interface TextareaProps
  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}

const Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(
  ({ className, ...props }, ref) => {
    return (
      <textarea
        className={cn(
          "flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Textarea.displayName = "Textarea"

export { Textarea }

# End of src/components/ui/textarea.tsx


# Start of src/components/ui/toggle.tsx

import * as React from "react"
import * as TogglePrimitive from "@radix-ui/react-toggle"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const toggleVariants = cva(
  "inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground",
  {
    variants: {
      variant: {
        default: "bg-transparent",
        outline:
          "border border-input bg-transparent hover:bg-accent hover:text-accent-foreground",
      },
      size: {
        default: "h-10 px-3",
        sm: "h-9 px-2.5",
        lg: "h-11 px-5",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const Toggle = React.forwardRef<
  React.ElementRef<typeof TogglePrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, ...props }, ref) => (
  <TogglePrimitive.Root
    ref={ref}
    className={cn(toggleVariants({ variant, size, className }))}
    {...props}
  />
))

Toggle.displayName = TogglePrimitive.Root.displayName

export { Toggle, toggleVariants }

# End of src/components/ui/toggle.tsx


# Start of src/components/ui/toggle-group.tsx

import * as React from "react"
import * as ToggleGroupPrimitive from "@radix-ui/react-toggle-group"
import { type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"
import { toggleVariants } from "@/components/ui/toggle"

const ToggleGroupContext = React.createContext<
  VariantProps<typeof toggleVariants>
>({
  size: "default",
  variant: "default",
})

const ToggleGroup = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, children, ...props }, ref) => (
  <ToggleGroupPrimitive.Root
    ref={ref}
    className={cn("flex items-center justify-center gap-1", className)}
    {...props}
  >
    <ToggleGroupContext.Provider value={{ variant, size }}>
      {children}
    </ToggleGroupContext.Provider>
  </ToggleGroupPrimitive.Root>
))

ToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName

const ToggleGroupItem = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &
    VariantProps<typeof toggleVariants>
>(({ className, children, variant, size, ...props }, ref) => {
  const context = React.useContext(ToggleGroupContext)

  return (
    <ToggleGroupPrimitive.Item
      ref={ref}
      className={cn(
        toggleVariants({
          variant: context.variant || variant,
          size: context.size || size,
        }),
        className
      )}
      {...props}
    >
      {children}
    </ToggleGroupPrimitive.Item>
  )
})

ToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName

export { ToggleGroup, ToggleGroupItem }

# End of src/components/ui/toggle-group.tsx


# Start of tsconfig.json

{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ],
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    },
    "noImplicitAny": false,
    "noUnusedParameters": false,
    "skipLibCheck": true,
    "allowJs": true,
    "noUnusedLocals": false,
    "strictNullChecks": false
  }
}

# End of tsconfig.json


# Start of package.json

{
  "name": "vite_react_shadcn_ts",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "build:dev": "vite build --mode development",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@hookform/resolvers": "^3.9.0",
    "@radix-ui/react-accordion": "^1.2.0",
    "@radix-ui/react-alert-dialog": "^1.1.1",
    "@radix-ui/react-aspect-ratio": "^1.1.0",
    "@radix-ui/react-avatar": "^1.1.0",
    "@radix-ui/react-checkbox": "^1.1.1",
    "@radix-ui/react-collapsible": "^1.1.0",
    "@radix-ui/react-context-menu": "^2.2.1",
    "@radix-ui/react-dialog": "^1.1.2",
    "@radix-ui/react-dropdown-menu": "^2.1.1",
    "@radix-ui/react-hover-card": "^1.1.1",
    "@radix-ui/react-label": "^2.1.0",
    "@radix-ui/react-menubar": "^1.1.1",
    "@radix-ui/react-navigation-menu": "^1.2.0",
    "@radix-ui/react-popover": "^1.1.1",
    "@radix-ui/react-progress": "^1.1.0",
    "@radix-ui/react-radio-group": "^1.2.0",
    "@radix-ui/react-scroll-area": "^1.1.0",
    "@radix-ui/react-select": "^2.1.1",
    "@radix-ui/react-separator": "^1.1.0",
    "@radix-ui/react-slider": "^1.2.0",
    "@radix-ui/react-slot": "^1.1.0",
    "@radix-ui/react-switch": "^1.1.0",
    "@radix-ui/react-tabs": "^1.1.0",
    "@radix-ui/react-toast": "^1.2.1",
    "@radix-ui/react-toggle": "^1.1.0",
    "@radix-ui/react-toggle-group": "^1.1.0",
    "@radix-ui/react-tooltip": "^1.1.4",
    "@tanstack/react-query": "^5.56.2",
    "@types/prismjs": "^1.26.5",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "cmdk": "^1.0.0",
    "date-fns": "^3.6.0",
    "embla-carousel-react": "^8.3.0",
    "input-otp": "^1.2.4",
    "lucide-react": "^0.462.0",
    "next-themes": "^0.3.0",
    "prismjs": "^1.29.0",
    "react": "^18.3.1",
    "react-confetti": "^6.2.2",
    "react-day-picker": "^8.10.1",
    "react-dom": "^18.3.1",
    "react-hook-form": "^7.53.0",
    "react-resizable-panels": "^2.1.3",
    "react-router-dom": "^6.26.2",
    "recharts": "^2.12.7",
    "sonner": "^1.5.0",
    "tailwind-merge": "^2.5.2",
    "tailwindcss-animate": "^1.0.7",
    "vaul": "^0.9.3",
    "zod": "^3.23.8"
  },
  "devDependencies": {
    "@eslint/js": "^9.9.0",
    "@tailwindcss/typography": "^0.5.15",
    "@types/node": "^22.5.5",
    "@types/react": "^18.3.3",
    "@types/react-dom": "^18.3.0",
    "@vitejs/plugin-react-swc": "^3.5.0",
    "autoprefixer": "^10.4.20",
    "eslint": "^9.9.0",
    "eslint-plugin-react-hooks": "^5.1.0-rc.0",
    "eslint-plugin-react-refresh": "^0.4.9",
    "globals": "^15.9.0",
    "lovable-tagger": "^1.0.19",
    "postcss": "^8.4.47",
    "tailwindcss": "^3.4.11",
    "typescript": "^5.5.3",
    "typescript-eslint": "^8.0.1",
    "vite": "^5.4.1"
  }
}

# End of package.json

