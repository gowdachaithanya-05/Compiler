
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftEQNEleftLTLEGTGEleftPLUSMINUSleftMULTIPLYDIVIDErightUMINUSASSIGN COMMA DIVIDE ELSE EQ FLOAT FLOAT_LITERAL GE GT IDENTIFIER IF INT INT_LITERAL LBRACE LE LPAREN LT MINUS MULTIPLY NE PLUS RBRACE RETURN RPAREN SEMICOLON STRING_LITERALprogram : declarationsdeclarations : declarations declaration\n                    | declarationdeclaration : var_declaration\n                   | func_declarationvar_declaration : type_specifier IDENTIFIER SEMICOLON\n                       | type_specifier IDENTIFIER ASSIGN expression SEMICOLONtype_specifier : INT\n                      | FLOATfunc_declaration : type_specifier IDENTIFIER LPAREN params RPAREN compound_stmtparams : param_list\n              | emptyparam_list : param_list COMMA param\n                  | paramparam : type_specifier IDENTIFIERcompound_stmt : LBRACE stmt_list RBRACEstmt_list : stmt_list statement\n                 | emptystatement : expr_stmt\n                 | var_declaration\n                 | compound_stmt\n                 | if_stmt\n                 | return_stmtif_stmt : IF LPAREN expression RPAREN statement\n               | IF LPAREN expression RPAREN statement ELSE statementreturn_stmt : RETURN expression SEMICOLONexpr_stmt : expression SEMICOLONexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression MULTIPLY expression\n                  | expression DIVIDE expression\n                  | expression LT expression\n                  | expression GT expression\n                  | expression LE expression\n                  | expression GE expression\n                  | expression EQ expression\n                  | expression NE expressionexpression : MINUS expression %prec UMINUSexpression : LPAREN expression RPARENexpression : INT_LITERAL\n                  | FLOAT_LITERALexpression : IDENTIFIERexpression : IDENTIFIER LPAREN arg_list RPARENarg_list : arg_list COMMA expression\n                | expression\n                | emptyempty :expression : STRING_LITERALpreprocessor : '
    
_lr_action_items = {'INT':([0,2,3,4,5,9,11,13,27,42,57,58,62,63,65,66,67,68,69,70,71,76,81,82,83,84,85,],[7,7,-3,-4,-5,-2,-6,7,-7,7,-10,-47,7,-18,-16,-17,-19,-20,-21,-22,-23,-27,-26,7,-24,7,-25,]),'FLOAT':([0,2,3,4,5,9,11,13,27,42,57,58,62,63,65,66,67,68,69,70,71,76,81,82,83,84,85,],[8,8,-3,-4,-5,-2,-6,8,-7,8,-10,-47,8,-18,-16,-17,-19,-20,-21,-22,-23,-27,-26,8,-24,8,-25,]),'$end':([1,2,3,4,5,9,11,27,57,65,],[0,-1,-3,-4,-5,-2,-6,-7,-10,-16,]),'IDENTIFIER':([6,7,8,11,12,16,17,21,26,27,28,29,30,31,32,33,34,35,36,37,58,61,62,63,65,66,67,68,69,70,71,73,75,76,78,81,82,83,84,85,],[10,-8,-9,-6,14,14,14,40,14,-7,14,14,14,14,14,14,14,14,14,14,-47,14,14,-18,-16,-17,-19,-20,-21,-22,-23,77,14,-27,14,-26,14,-24,14,-25,]),'SEMICOLON':([10,14,15,18,19,20,38,46,47,48,49,50,51,52,53,54,55,56,60,72,77,79,],[11,-42,27,-40,-41,-48,-38,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-39,-43,76,11,81,]),'ASSIGN':([10,77,],[12,12,]),'LPAREN':([10,11,12,14,16,17,26,27,28,29,30,31,32,33,34,35,36,37,58,61,62,63,65,66,67,68,69,70,71,74,75,76,78,81,82,83,84,85,],[13,-6,17,26,17,17,17,-7,17,17,17,17,17,17,17,17,17,17,-47,17,17,-18,-16,-17,-19,-20,-21,-22,-23,78,17,-27,17,-26,17,-24,17,-25,]),'RBRACE':([11,27,58,62,63,65,66,67,68,69,70,71,76,81,83,85,],[-6,-7,-47,65,-18,-16,-17,-19,-20,-21,-22,-23,-27,-26,-24,-25,]),'LBRACE':([11,27,41,58,62,63,65,66,67,68,69,70,71,76,81,82,83,84,85,],[-6,-7,58,-47,58,-18,-16,-17,-19,-20,-21,-22,-23,-27,-26,58,-24,58,-25,]),'IF':([11,27,58,62,63,65,66,67,68,69,70,71,76,81,82,83,84,85,],[-6,-7,-47,74,-18,-16,-17,-19,-20,-21,-22,-23,-27,-26,74,-24,74,-25,]),'RETURN':([11,27,58,62,63,65,66,67,68,69,70,71,76,81,82,83,84,85,],[-6,-7,-47,75,-18,-16,-17,-19,-20,-21,-22,-23,-27,-26,75,-24,75,-25,]),'MINUS':([11,12,14,15,16,17,18,19,20,26,27,28,29,30,31,32,33,34,35,36,37,38,39,44,46,47,48,49,50,51,52,53,54,55,56,58,60,61,62,63,64,65,66,67,68,69,70,71,72,75,76,78,79,80,81,82,83,84,85,],[-6,16,-42,29,16,16,-40,-41,-48,16,-7,16,16,16,16,16,16,16,16,16,16,-38,29,29,-28,-29,-30,-31,29,29,29,29,29,29,-39,-47,-43,16,16,-18,29,-16,-17,-19,-20,-21,-22,-23,29,16,-27,16,29,29,-26,16,-24,16,-25,]),'INT_LITERAL':([11,12,16,17,26,27,28,29,30,31,32,33,34,35,36,37,58,61,62,63,65,66,67,68,69,70,71,75,76,78,81,82,83,84,85,],[-6,18,18,18,18,-7,18,18,18,18,18,18,18,18,18,18,-47,18,18,-18,-16,-17,-19,-20,-21,-22,-23,18,-27,18,-26,18,-24,18,-25,]),'FLOAT_LITERAL':([11,12,16,17,26,27,28,29,30,31,32,33,34,35,36,37,58,61,62,63,65,66,67,68,69,70,71,75,76,78,81,82,83,84,85,],[-6,19,19,19,19,-7,19,19,19,19,19,19,19,19,19,19,-47,19,19,-18,-16,-17,-19,-20,-21,-22,-23,19,-27,19,-26,19,-24,19,-25,]),'STRING_LITERAL':([11,12,16,17,26,27,28,29,30,31,32,33,34,35,36,37,58,61,62,63,65,66,67,68,69,70,71,75,76,78,81,82,83,84,85,],[-6,20,20,20,20,-7,20,20,20,20,20,20,20,20,20,20,-47,20,20,-18,-16,-17,-19,-20,-21,-22,-23,20,-27,20,-26,20,-24,20,-25,]),'ELSE':([11,27,65,67,68,69,70,71,76,81,83,85,],[-6,-7,-16,-19,-20,-21,-22,-23,-27,-26,84,-25,]),'RPAREN':([13,14,18,19,20,22,23,24,25,26,38,39,40,43,44,45,46,47,48,49,50,51,52,53,54,55,56,59,60,64,80,],[-47,-42,-40,-41,-48,41,-11,-12,-14,-47,-38,56,-15,60,-45,-46,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-39,-13,-43,-44,82,]),'PLUS':([14,15,18,19,20,38,39,44,46,47,48,49,50,51,52,53,54,55,56,60,64,72,79,80,],[-42,28,-40,-41,-48,-38,28,28,-28,-29,-30,-31,28,28,28,28,28,28,-39,-43,28,28,28,28,]),'MULTIPLY':([14,15,18,19,20,38,39,44,46,47,48,49,50,51,52,53,54,55,56,60,64,72,79,80,],[-42,30,-40,-41,-48,-38,30,30,30,30,-30,-31,30,30,30,30,30,30,-39,-43,30,30,30,30,]),'DIVIDE':([14,15,18,19,20,38,39,44,46,47,48,49,50,51,52,53,54,55,56,60,64,72,79,80,],[-42,31,-40,-41,-48,-38,31,31,31,31,-30,-31,31,31,31,31,31,31,-39,-43,31,31,31,31,]),'LT':([14,15,18,19,20,38,39,44,46,47,48,49,50,51,52,53,54,55,56,60,64,72,79,80,],[-42,32,-40,-41,-48,-38,32,32,-28,-29,-30,-31,-32,-33,-34,-35,32,32,-39,-43,32,32,32,32,]),'GT':([14,15,18,19,20,38,39,44,46,47,48,49,50,51,52,53,54,55,56,60,64,72,79,80,],[-42,33,-40,-41,-48,-38,33,33,-28,-29,-30,-31,-32,-33,-34,-35,33,33,-39,-43,33,33,33,33,]),'LE':([14,15,18,19,20,38,39,44,46,47,48,49,50,51,52,53,54,55,56,60,64,72,79,80,],[-42,34,-40,-41,-48,-38,34,34,-28,-29,-30,-31,-32,-33,-34,-35,34,34,-39,-43,34,34,34,34,]),'GE':([14,15,18,19,20,38,39,44,46,47,48,49,50,51,52,53,54,55,56,60,64,72,79,80,],[-42,35,-40,-41,-48,-38,35,35,-28,-29,-30,-31,-32,-33,-34,-35,35,35,-39,-43,35,35,35,35,]),'EQ':([14,15,18,19,20,38,39,44,46,47,48,49,50,51,52,53,54,55,56,60,64,72,79,80,],[-42,36,-40,-41,-48,-38,36,36,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-39,-43,36,36,36,36,]),'NE':([14,15,18,19,20,38,39,44,46,47,48,49,50,51,52,53,54,55,56,60,64,72,79,80,],[-42,37,-40,-41,-48,-38,37,37,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-39,-43,37,37,37,37,]),'COMMA':([14,18,19,20,23,25,26,38,40,43,44,45,46,47,48,49,50,51,52,53,54,55,56,59,60,64,],[-42,-40,-41,-48,42,-14,-47,-38,-15,61,-45,-46,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-39,-13,-43,-44,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declarations':([0,],[2,]),'declaration':([0,2,],[3,9,]),'var_declaration':([0,2,62,82,84,],[4,4,68,68,68,]),'func_declaration':([0,2,],[5,5,]),'type_specifier':([0,2,13,42,62,82,84,],[6,6,21,21,73,73,73,]),'expression':([12,16,17,26,28,29,30,31,32,33,34,35,36,37,61,62,75,78,82,84,],[15,38,39,44,46,47,48,49,50,51,52,53,54,55,64,72,79,80,72,72,]),'params':([13,],[22,]),'param_list':([13,],[23,]),'empty':([13,26,58,],[24,45,63,]),'param':([13,42,],[25,59,]),'arg_list':([26,],[43,]),'compound_stmt':([41,62,82,84,],[57,69,69,69,]),'stmt_list':([58,],[62,]),'statement':([62,82,84,],[66,83,85,]),'expr_stmt':([62,82,84,],[67,67,67,]),'if_stmt':([62,82,84,],[70,70,70,]),'return_stmt':([62,82,84,],[71,71,71,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> declarations','program',1,'p_program','parser.py',34),
  ('declarations -> declarations declaration','declarations',2,'p_declarations','parser.py',39),
  ('declarations -> declaration','declarations',1,'p_declarations','parser.py',40),
  ('declaration -> var_declaration','declaration',1,'p_declaration','parser.py',47),
  ('declaration -> func_declaration','declaration',1,'p_declaration','parser.py',48),
  ('var_declaration -> type_specifier IDENTIFIER SEMICOLON','var_declaration',3,'p_var_declaration','parser.py',52),
  ('var_declaration -> type_specifier IDENTIFIER ASSIGN expression SEMICOLON','var_declaration',5,'p_var_declaration','parser.py',53),
  ('type_specifier -> INT','type_specifier',1,'p_type_specifier','parser.py',63),
  ('type_specifier -> FLOAT','type_specifier',1,'p_type_specifier','parser.py',64),
  ('func_declaration -> type_specifier IDENTIFIER LPAREN params RPAREN compound_stmt','func_declaration',6,'p_func_declaration','parser.py',68),
  ('params -> param_list','params',1,'p_params','parser.py',76),
  ('params -> empty','params',1,'p_params','parser.py',77),
  ('param_list -> param_list COMMA param','param_list',3,'p_param_list','parser.py',81),
  ('param_list -> param','param_list',1,'p_param_list','parser.py',82),
  ('param -> type_specifier IDENTIFIER','param',2,'p_param','parser.py',89),
  ('compound_stmt -> LBRACE stmt_list RBRACE','compound_stmt',3,'p_compound_stmt','parser.py',95),
  ('stmt_list -> stmt_list statement','stmt_list',2,'p_stmt_list','parser.py',99),
  ('stmt_list -> empty','stmt_list',1,'p_stmt_list','parser.py',100),
  ('statement -> expr_stmt','statement',1,'p_statement','parser.py',107),
  ('statement -> var_declaration','statement',1,'p_statement','parser.py',108),
  ('statement -> compound_stmt','statement',1,'p_statement','parser.py',109),
  ('statement -> if_stmt','statement',1,'p_statement','parser.py',110),
  ('statement -> return_stmt','statement',1,'p_statement','parser.py',111),
  ('if_stmt -> IF LPAREN expression RPAREN statement','if_stmt',5,'p_if_stmt','parser.py',115),
  ('if_stmt -> IF LPAREN expression RPAREN statement ELSE statement','if_stmt',7,'p_if_stmt','parser.py',116),
  ('return_stmt -> RETURN expression SEMICOLON','return_stmt',3,'p_return_stmt','parser.py',123),
  ('expr_stmt -> expression SEMICOLON','expr_stmt',2,'p_expr_stmt','parser.py',128),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','parser.py',132),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','parser.py',133),
  ('expression -> expression MULTIPLY expression','expression',3,'p_expression_binop','parser.py',134),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','parser.py',135),
  ('expression -> expression LT expression','expression',3,'p_expression_binop','parser.py',136),
  ('expression -> expression GT expression','expression',3,'p_expression_binop','parser.py',137),
  ('expression -> expression LE expression','expression',3,'p_expression_binop','parser.py',138),
  ('expression -> expression GE expression','expression',3,'p_expression_binop','parser.py',139),
  ('expression -> expression EQ expression','expression',3,'p_expression_binop','parser.py',140),
  ('expression -> expression NE expression','expression',3,'p_expression_binop','parser.py',141),
  ('expression -> MINUS expression','expression',2,'p_expression_uminus','parser.py',148),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','parser.py',153),
  ('expression -> INT_LITERAL','expression',1,'p_expression_number','parser.py',157),
  ('expression -> FLOAT_LITERAL','expression',1,'p_expression_number','parser.py',158),
  ('expression -> IDENTIFIER','expression',1,'p_expression_identifier','parser.py',162),
  ('expression -> IDENTIFIER LPAREN arg_list RPAREN','expression',4,'p_expression_call','parser.py',166),
  ('arg_list -> arg_list COMMA expression','arg_list',3,'p_arg_list','parser.py',170),
  ('arg_list -> expression','arg_list',1,'p_arg_list','parser.py',171),
  ('arg_list -> empty','arg_list',1,'p_arg_list','parser.py',172),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',184),
  ('expression -> STRING_LITERAL','expression',1,'p_expression_string','parser.py',202),
  ('preprocessor -> <empty>','preprocessor',0,'p_preprocessor_directive','parser.py',206),
]
